#!/usr/bin/env ruby

require 'rubygems'
require 'influxdb'
require 'pry'
require 'thor'
require 'awesome_print'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'influxdb_client/version'
require 'influxdb_client/client'

class InfluxDBClientTasks < Thor
  @@db = nil

  desc 'db', 'Connect to InfluxDB (default command)'
  method_option :host,      :default => 'localhost',  :desc => 'Hostname'
  method_option :port,      :default => 8086,         :desc => 'Port'
  method_option :username,  :default => 'root',       :desc => 'Username', :aliases => '-u'
  method_option :password,  :default => 'root',       :desc => 'Password', :aliases => '-p'
  method_option :database,  :default => 'db',         :desc => 'Database', :aliases => '-d'
  method_option :pretty,    :default => nil,          :desc => 'Human readable times'

  def db
    puts "Connecting to #{options.inspect}"
    @@db ||= InfluxDB::Client.new options[:database],
      { username: options[:username], password: options[:password], host: options[:host], port: options[:port] }
    InfluxDBClient::Client.pretty = options[:pretty]
    puts 'âœ” ready'
  end

  desc 'version', 'Show influxdb-cli version'
  def version
    puts "influxdb-cli #{InfluxDBClient::VERSION}"
  end

  def self.db; @@db; end

  default_command :db
end

# Returns {InfluxDB::Client} instance using given parameters.
#
# @return [InfluxDB::Client]
def db; InfluxDBClientTasks.db; end

InfluxDBClientTasks.start

# exit if the db command wasn't called
exit 0 unless db

# allow typing queries directly from console i.e.`select * from deploys` instead of `query('select * from deploys')`.
# matches `delete from ...` and `select ... from ...`
Pry::Commands.block_command InfluxDBClient::Client::QUERY_LANGUAGE_MATCHER, 'Execute a query' do |query|
  start     = Time.now
  result    = db.query(query)
  duration  = Time.now - start

  InfluxDBClient::Client.print_tabularize(result)

  # print query duration in seconds
  puts "Query duration: #{duration.round(2)}s"
end

# switch databases `use db_name`
Pry::Commands.block_command InfluxDBClient::Client::SWITCH_DATABASE_MATCHER, 'Switch databases' do |db_name|
  db.database = db_name
end

# awesome_print
Pry.config.print = proc { |output, value| Pry::Helpers::BaseHelpers.stagger_output("=> #{value.ai}", output) }

# TODO start `pry` only in case of `db` command, `help` and `version` should not start `pry`
pry

